classDiagram
    class Persona{
        - nombre: String
        - id: long
        - edad: int
        - sexo: Sexo
        - direccion: String
        - fechaNacimiento: LocalDate
        + getEdad() int
        - setEdad()
    }
    
    class CarritoCompras{
        - productos: Map~Producto, Integer~
        - permisos: Set~Permisos~
        - importe: float
        - setProducto(Producto, int)
        + incorporarProducto(Producto) boolean
        + incorporarProducto(Producto, int) boolean
        + meterPermiso(Permiso permiso) boolean
        + sacarProducto(Producto, int) Optional~Integer~
    }

    class Permiso {
        <<abstract>>
    }

    class Sexo {
        <<enum>>
        Masculino
        Femenino
        Intersexual
    }

    class Venta{
       - id: long
       - fecha: LocalDate
       - cliente: Persona
       - compra: CarritoCompras
    }

    class Tarjeton{
        - productos: Map~Producto, Integer~
        - creationDate: LocalDate
        - expireDate: LocalDate
    }

    class Presentacion  {
        <<enum>>
        Pomada
        Capsulas
        Tabletas
        Jarabe
        Hierbas
        Polvo
        Inhalaciones
    }        
    class PacienteControlado{
        - patologias: Set~String~
        - tarjetones: Set~Tarjeton~
    }

    class RegistroPacientesControlados {
        + controlarPaciente(Persona paciente) PacienteControlado
        + darTarjeton(Persona paciente, Map~Producto~ productos, LocalDate creacion, LocalDate vencimiento) boolean
        + buscarPaciente(long id) Optional~PacienteControlado~
    }

    class RegistroPacientes {
        + crearPaciente(long id, String nombre, String direccion, Sexo sexo, LocalDate fechaNacimiento) Persona
        + buscarPaciente(long id) Persona
    }
    
    class Medicamento{
        - presentacion: Presentacion
        - nombreCientifico: String
        - fortalezaMg: int
        - temperaturaDeAlmacenamiento: int
        + mismaMedicina(Medicamento otro) boolean
    }

    class ConstructorMedicamentos{
        - presentacion: Presentacion
        - nombreCientifico: String
        - fortalezaMg: int
        - temperaturaDeAlmacenamiento: int
        - id: long
        - nombre: String
        - precioUnitario: float
        - control: Control

        + resetear()
        + construirId(Long id) boolean
        + construirNombre(String nombre) boolean
        + construirPrecio(float precio) boolean
        + construirControl(Control control) boolean
        + construirNombreCientifico(String nombreCientifico) boolean
        + construirPresentacion(Presentacion presentacion) boolean
        + construirFortalezaMg(int fortalezaMg) boolean
        + construirTemperaturaAlmacenamiento(int temperaturaDeAlmacenamiento) boolean
        + generar() Medicamento
    }

    class Almacen {
      - productos: Map ~Producto, Integer~
      - lotes: Map~Producto, Set~Lote~~
      + incorporarLote(Lote lote) boolean
      + incorporarLote(Lote, int) boolean
      + incorporarProducto(Producto) boolean
      + incorporarProducto(Producto, int) boolean
      + sacarProducto(Producto, int) Optional~Integer~
      + sacarLote(Lote): Optional~Lote~
      + crearProducto(long id, String nombre, float precio, Control control) Producto
      + crearMedicamento() boolean
      + crearLote(Long id, Producto producto, int cantidad) Lote
      + crearLote(Long id, Producto producto, int cantidad, LocalDate fechaProduccion, LocalDate fechaVencimiento) Lote
      - setProducto(Producto, int)
      - setLote(Lote, int)
    }

    class ControlDeVentas {
        <<interface>>
        + comenzarVenta() 
        + consolidarVenta() 
        + cancelarVenta() 
        + comprarProducto(Venta venta, Producto producto, int cantidad) float
        + comprarIntimas(Venta, Libreta) float
        + comprarConReceta(Venta, Receta) float
        + comprarConTarjeton(Venta, Tarjeton) float
        + comprarConTarjeton(Venta, Tarjeton, Set~Producto~) float
    }

    class Libreta {
        - id: long
        - direccion: String
        - jefeDeNucleo: Persona
        - personas: Set~Persona~
    }

    class RegistroLibretas {
        + buscarLibreta(long id) Libreta
        + crearLibreta(long id, String direccion, long idJefe, String nombreJefe, Sexo sexoJefe, String direccionJefe) Libreta
        + registrarEnLibreta(Libreta libreta, long id, String nombre, Sexo sexo, String direccion, boolean esJefe) Optional~Libreta~
        + cambiarJefeLibreta(Libreta libreta, long idJefe) Optional~Libreta~
        + eliminarDeLibretareta(Persona persona,Libreta libreta) Optional~Libreta~
    }

    class Producto {
        - id: long
        - nombre: String
        - precioUnitario: float
        - control: Control
    }
    
    class Receta{
        - idMedico: long
        - nombreMedico: String
        - fechaCreacion: LocalDate
        - prodcuctos: Map~Producto, Integer~
    }

    class ValidadorVentas {
        <<interface>>
        + validarCarrito(CarritoCompras): boolean
        + libretaCompro(Libreta) boolean
        + tarjetonCompro(Tarjeton, Set~Producto~) boolean
        + recetaCompro(Receta) boolean
        + validarReceta(Receta receta) boolean
        + validarLibretas(Libreta libreta) boolean
        + validarTarjeton(Tarjeton tarjeton) boolean
    }

    class Control {
        <<enum>>
        Libre
        Libreta
        Receta
        Tarjeton
    }

    class Farmacia {
        + productosComprables() Map~Product, Integer~ 
    } 

    class Registro~T, C extends Collection~T~~ {
        <<interface>>
        add(T element) boolean
        update(T old, T actual) T
        delete(T element) T
        getIf(Predicate~T~ condition) C
        getAll() C
    }

    class RegistroVentas {
        + ventasEntre(LocalDate start, LocalDate end): List~Venta~
    }

    class Lote{
        - id: long
        - cantidad: int
        - producto: Producto
        - fechaProduccion: Optional~LocalDate~
        - fechaVencimiento: Optional~LocalDate~
    }

    Farmacia ..|> ControlDeVentas
    Farmacia ..|> ValidadorVentas
    Farmacia "1" *-- "1" CarritoCompras 
    Libreta "1" o-- "1..*" Persona
    PacienteControlado "1" o-- "1" Persona
    Tarjeton "1..*" -- "1" PacienteControlado
    Tarjeton "1..*" -- "1..4" Producto
    Medicamento --|> Producto
    Almacen "1" *-- "1" ConstructorMedicamentos
    Almacen "1" *-- "*" Producto 
    Almacen "1" *-- "*" Lote
    Lote --> Producto
    Venta "1" o-- "1" CarritoCompras
    ControlDeVentas "1" *-- "*" Venta

    Tarjeton --|> Permiso
    Libreta --|> Permiso
    Receta --|> Permiso

    RegistroLibretas ..|> Registro
    Almacen ..|> Registro
    RegistroVentas ..|> Registro
    RegistroPacientes ..|> Registro
    RegistroPacientesControlados ..|> Registro

    RegistroLibretas "1" *-- "*" Libreta
    RegistroLibretas "1" *-- "1" ConstructorLibretas
    RegistroPacientes "1" *-- "*" Persona
    RegistroPacientesControlados "1" *-- "*" PacienteControlado
    Farmacia "1" ..* "1" RegistroLibretas
    Farmacia "1" ..* "1" RegistroVentas
    Farmacia "1" ..* "1" RegistroPacientes
    Farmacia "1" ..* "1" RegistroPacientesControlados
